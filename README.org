#+TITLE: Aggregation package for Wire Cell packages

* Prerequisites

Some external packages are required as described in this section.  

** Automated installation

For an automated installation method see [[https://github.com/BNLIF/wire-cell-externals][wire-cell-externals]].

** Manual installation

The definitive list of required packages, their versions and build details are kept in wire-cell-externals [[https://github.com/BNLIF/wire-cell-externals/blob/master/worch.cfg][worch.cfg]] file.  Refer to that for the most up-to-date information on what software is needed.  In summary you will need to install and arrange to set up your user environment for the following packages:

 - ROOT v6 
 - Python 2.7


* Building

** Preparing the source

The wire cell source project uses =git-submodules= to bring all the source together:

#+BEGIN_EXAMPLE
  $ git clone git@github.com:BNLIF/wire-cell.git
  $ cd wire-cell
  $ git submodule init
  $ git submodule update
#+END_EXAMPLE

** Building against wire-cell-externals

The simplest way to build the software is if you installed the necessary externals into a virtualenv as described [[https://github.com/BNLIF/wire-cell-externals#single-rooted-install][here]].  If you followed those steps then you need only do:

#+BEGIN_EXAMPLE
  $ waf --prefix=$VIRTUAL_ENV configure build install
#+END_EXAMPLE

** Building against your own externals

If you provide your external packages yourself you need to do just a bit more setup.

*** Getting waf

First, you will need to get a copy of =waf=.  You can download it yourself or you can use the copy that is provided in the  =waf-tools= submodule.  For convenience it's recommended either copy it into your =$PATH= or make an alias:

#+BEGIN_EXAMPLE
  bash$ alias waf=`pwd`/waf-tools/waf
  tcsh$ alias waf `pwd`/waf-tools/waf
#+END_EXAMPLE

*** Build and install

#+BEGIN_EXAMPLE
  $ waf --prefix=/path/to/install configure build install
#+END_EXAMPLE

*** User environment

You will need to set the usual =$PATH=, =$LD_LIBRARY_PATH=, etc pointing at =/path/to/install= yourself.

* Developing

Here is what you will do in the act of developing code.

** Rebuilding

To rebuild after hacking on the source just type:

#+BEGIN_EXAMPLE
  $ waf
#+END_EXAMPLE

When ready to install into the configured "prefix" installation area:

#+BEGIN_EXAMPLE
  $ waf install
#+END_EXAMPLE

** New packages

To add new packages to Wire Cell follow these steps:

*** Source Package Conventions.

Wire Cell packages follow a layout convention to keep their build simple.  Each source package should be kept in it's own git.  The package naming convention is:

#+BEGIN_EXAMPLE
  wire-cell-NAME
#+END_EXAMPLE

This name convention is optional.  

The source package must be organized following these sub-directory conventions:

 - =src/= :: C++ source file for libraries with =.cxx= extensions or private headers 
 - =inc/NAME/= :: public/API C++ header files with =.h= extensions
 - =dict/LinkDef.h= :: ROOT linkdef header (for =rootcling= dictionaries)
 - =tests/= :: Unit tests Python (nosetests) files like =test_*.py= or main C++ programs named like =test_*.cxx=.
- =apps/= :: main application(s), one =appname.cxx= file for each app named appname (todo: not yet supported)
- =python/NAME= :: python modules (todo: not yet supported)
